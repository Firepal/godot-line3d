[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

vec3 line_process(float width, vec3 vertex, mat4 world_mat, vec3 cam_pos, vec3 dir_to_next_vertex, vec2 uv,
					out vec3 normal, out vec3 tangent){
	vec3 wv = (world_mat*vec4(vertex,1.0)).xyz;
	vec3 dir_to_cam = wv-cam_pos;
	dir_to_cam *= mat3(world_mat);
	vec3 perp = normalize(cross(dir_to_cam,dir_to_next_vertex));
	
	tangent = perp;
	normal = cross(perp,dir_to_next_vertex);
	
	if (uv.y < 0.5)	perp *= -1.0;
	vertex += perp*width;
	return vertex;
}
uniform float line_width = 0.01;
void vertex(){
	VERTEX = line_process(line_width,VERTEX,WORLD_MATRIX,CAMERA_MATRIX[3].xyz,COLOR.xyz,UV,
							NORMAL,TANGENT);
}

uniform vec4 albedo_color : hint_color = vec4(vec3(0.8),1.0);
uniform float metallic : hint_range(0.0,1.0) = 0.0;
uniform float roughness : hint_range(0.0,1.0) = 0.5;

void fragment(){
	ALBEDO = albedo_color.rgb;
	METALLIC = metallic;
	ROUGHNESS = roughness;
	
	// Cylindrical normal
	NORMALMAP.x = UV.y;
}"
