[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode specular_schlick_ggx;
//render_mode unshaded;

uniform float line_width = 0.03;
uniform bool z_facing = false;
uniform bool rounded = false;
float line_process(float width, inout vec3 vertex, mat4 world_mat, vec3 cam_pos, vec3 dir_to_next_vertex, vec2 uv,
					inout vec3 normal, out vec3 tangent){
	vec3 dir_to_cam = ((world_mat*vec4(vertex,1.0)).xyz - cam_pos)*mat3(world_mat);
	vec3 perp = cross(dir_to_cam,dir_to_next_vertex);
	if (z_facing)	perp = normal;
	
	// 1.0 if the vertex is a line ending, otherwise 0.0
	float is_end = float(abs(uv.x-0.5) > 0.4999);
	
	// Set sign to 1.0 for one end and -1.0 for the other end
	is_end *= -sign(uv.x-0.5);
	
	// rounded + z_facing looks bad together so we disable rounded ends in that case
	vec3 rounder = vec3(0.0);
	if (rounded && !z_facing) {
		rounder = is_end * normalize(-cross(perp,dir_to_cam));
	}
	
	float side = sign(float(uv.y > 0.5)-0.5);
	perp = normalize(perp);
	vertex += ((perp*side)-rounder) * width;
	
	tangent = perp;
	normal = cross(perp,dir_to_next_vertex);
	return is_end;
}

varying float is_end;
void vertex(){
	is_end = line_process(line_width,VERTEX,WORLD_MATRIX,CAMERA_MATRIX[3].xyz,NORMAL,UV2,
							NORMAL,TANGENT);
	BINORMAL = normalize( cross(NORMAL,TANGENT) );
	
	if (rounded && !z_facing) {
		UV.x -= is_end*line_width;
		UV2.x -= is_end*line_width;
	}
}

float getDistToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return length(c);
}

float getDistSquaredToLineCenter(vec2 uv) {
	vec2 c = vec2(is_end*0.5,uv.y-0.5);
	return dot(c,c);
}

vec2 getLineTubeNormal(vec2 uv) {
	vec2 n = vec2(0.5);
	n.x = uv.y;
	if (rounded) { n.y = (is_end*0.5)+0.5; }
	return n;
}

uniform float roughness = 0.5;
void fragment(){
	if (rounded && !z_facing) {
		ALPHA = 1.0 - getDistSquaredToLineCenter(UV2);
		
//		ALPHA_SCISSOR = 0.75;
		
		ALPHA = smoothstep(0.75,0.78,ALPHA);
	}
	
	
	
	ALBEDO = vec3( 1.0 );
	ROUGHNESS = roughness;
	if (!z_facing) { NORMALMAP.xy = getLineTubeNormal(UV); }
}"

[resource]
shader = SubResource( 1 )
shader_param/line_width = 0.029
shader_param/z_facing = false
shader_param/rounded = true
shader_param/roughness = 0.5
