[gd_resource type="Shader" format=3 uid="uid://csvydtabmmhi7"]

[resource]
code = "shader_type spatial;
render_mode skip_vertex_transform, cull_disabled;
render_mode vertex_lighting;
//render_mode depth_draw_opaque;

#include \"res://addons/godot-polyliner/shaders/include/polyliner_inc.gdshaderinc\"

uniform float line_width = 0.1;
uniform sampler2D width_curve : source_color;
uniform bool tangent_facing = false;
uniform bool rounded = false;

varying float is_end;
void vertex(){
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX,1.0)).xyz;
	NORMAL = mat3(MODELVIEW_MATRIX) * NORMAL;
	TANGENT = mat3(MODELVIEW_MATRIX) * TANGENT;
	
	quick_line(line_width,rounded);
	
	BINORMAL = cross(TANGENT,NORMAL);
	
	float line_length = UV2.x;
	UV.x = 1.0-UV.x;
	UV2 = UV;
	UV2.x *= line_length;
	
	if (rounded) {
		float uv_correct = is_end*line_width;
		UV.x += uv_correct;
		UV2.x += uv_correct;
	}
}

uniform sampler2D albedo_tex : source_color;
uniform bool tex_stretch = true;
uniform vec2 tex_scale = vec2(1.0,1.0);

uniform vec4 color : source_color = vec4(vec3(1.0),1.0);
uniform float metallic  : hint_range(0.0,1.0,0.005) = 0.0;
uniform float specular  : hint_range(0.0,1.0,0.005) = 0.5;
uniform float roughness : hint_range(0.0,1.0,0.005) = 0.5;
void fragment() {
	if (!FRONT_FACING) { NORMAL = -NORMAL; }
	
	vec2 uv_alb = UV2;
	if (tex_stretch) {
		uv_alb = UV;
	}
	uv_alb *= tex_scale;
	
	vec4 alb_sample = texture(albedo_tex,uv_alb);
	
	ALBEDO = alb_sample.rgb * color.rgb;
	ALPHA = alb_sample.a * color.a;
	SPECULAR = specular;
	ROUGHNESS = roughness;
	METALLIC = metallic;
}"
